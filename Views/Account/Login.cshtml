@model ProjectShoeShop.ViewModel.LoginVM
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Login</title>
    <link href="~/Assets/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Assets/css/account.css" rel="stylesheet" />
    <style>
        .field-validation-error {
            margin-top: 37px;
        }
    </style>
</head>
<body style="background-color: #dbcc8f">
    @using (Html.BeginForm())
    {
        <div class="form-register mx-auto">
            <div class="header-form-image">
                <h2 class="text-center my-4">ĐĂNG NHẬP</h2>
                <h5 class="my-4 text-center" style="font-weight: 400">Đăng nhập tài khoản của bạn</h5>
            </div>
            <div class="p-4">
                <div class="row">
                    <div class="form-group input-bx col-12">
                        @Html.TextBoxFor(m => m.UserName)
                        <p>Username</p>
                        @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group input-bx col-12">
                        @Html.TextBoxFor(m => m.Password, new { @type = "password" })
                        <p>Password</p>
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <button class="btn btn-outline-light col" type="submit" style="background-color: #dbcc8f; padding: 8px 12px;">
                    ĐĂNG NHẬP
                </button>
                <p class="text-danger">@ViewBag.Message</p>
                <p style="margin-top: 20px">Bạn chưa có tài khoản ? <a href="/Account/Register">Đăng ký</a></p>
            </div>
        </div>
    }
<script>
    const inputs = document.querySelectorAll('.input-bx input');
    const labels = document.querySelectorAll('.input-bx p');

    inputs.forEach((input, index) => {
        if (input.value.trim() !== '') {
            labels[index].classList.add('active');
        }

        input.addEventListener('focus', () => {
            if (input.className == "date-inp") {
                input.nextElementSibling.classList.add('active-date');
            }
            else {
                input.nextElementSibling.classList.add('active');
            }
        });

        input.addEventListener('blur', () => {
            if (input.value.trim() == "") {
                labels[index].classList.remove('active');
            }
        });
    });
</script>
</body>
</html>
